1.	In this example, the query selects actors and includes optional graph patterns to retrieve age and nationality if available. The OPTIONAL keyword is used to specify the optional graph patterns.

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>
SELECT DISTINCT ?name ?age ?nationality
WHERE {
      ?actor rdf:type ont:Actor.
      ?actor ont:name ?name.
      OPTIONAL {
           ?actor ont:age ?age
   }
      OPTIONAL {
           ?actor ont:nationality ?nationality
   }
}

2.	In this example, the query selects movies and retrieves their titles, along with either the associated actors or the directors The query also includes a conjunction by using the FILTER function to make sure movie was before 2010 and has genre “Action”

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>
SELECT  ?title ?year ?genre_name ?actor_name ?director_name 
WHERE {
?movie rdf:type ont:Movie.
?movie ont:title ?title.
?movie ont:year ?year.
?movie ont:HasGenre ?genre.
?genre ont:genre ?genre_name.
{
?movie ont:HasActor ?actor_name.
}
UNION
{
?movie ont:HasDirector ?director_name.
}
FILTER(?year < 2010 && ?genre_name = "Action")
}

3.	CONSTRUCT a new RDF graph that includes individuals who are both actors and directors.

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX movies: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>

CONSTRUCT {
    ?person rdf:type movies:ActorDirector .
}
WHERE {
    ?person rdf:type movies:Actor .
    ?person rdf:type movies:Director .
}

4.	In this example, the ASK query form is used to check if there are any resources that match the specified patterns in the WHERE clause.

The WHERE clause contains patterns that describe the conditions that need to be satisfied for the query to return a boolean result. In this case, it checks if there is a resource of type "Movie" with the title "Inception".

When you execute this query, the result will be a boolean value indicating whether there are any resources that match the specified patterns. If there are matches, the result will be true; otherwise, it will be false.

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>
ASK
WHERE {
  ?movie rdf:type ont:Movie .
  ?movie ont:title "Inception" .
}

5.	In this example, the DESCRIBE query form is used to retrieve information about a specific resource (Actor). The DESCRIBE query returns a description of the specified resource, including its properties and connected resources.

DESCRIBE <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/Actor>

6.	List all persons in the ontology showing if they are actor, director, and writer.

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX movies: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>

SELECT ?name
WHERE {
  ?person rdf:type movies:Person .
  ?person movies:name ?name .
}

7.	List the movie titles and its details.

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX movies: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>

SELECT DISTINCT ?title ?year ?country ?genre ?actor ?director ?writer ?company
WHERE {
  ?movie rdf:type movies:Movie ;
         movies:title ?title ;
         movies:year ?year ;
         movies:country ?country ;
         movies:HasGenre ?genreResource ;
         movies:HasActor ?actorResource ;
         movies:HasDirector ?directorResource ;
         movies:HasWriter ?writerResource ;
         movies:HasProductionCompany ?productionCompany.
      
  
  ?genreResource movies:genre ?genre .
  
  ?actorResource movies:name ?actor .
  
  ?directorResource movies:name ?director .
  
  ?writerResource movies:name ?writer .
  
  ?productionCompany movies:pcname ?company.
}
But in this example, we make the user enter the name of the movie and if found in the ontology, it displays its details.
 
 
