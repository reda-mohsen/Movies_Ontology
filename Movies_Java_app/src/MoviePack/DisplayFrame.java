/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MoviePack;

import static MoviePack.Person.addPerson;
import antlr.ByteBuffer;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import java.awt.event.ActionEvent;
import java.nio.charset.Charset;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.w3c.dom.NameList;

/**
 *
 * @author damr
 */
public class DisplayFrame extends javax.swing.JFrame {

    /**
     * Creates new form DisplayFrame
     */
    public ArrayList<String> ListNames =new ArrayList<String>();
    
    public DisplayFrame() {
        initComponents();
    }

    int once = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Movie_Titles = new javax.swing.JButton();
        NameList = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Movie_Titles.setText("Movie Titles");
        Movie_Titles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Movie_TitlesActionPerformed(evt);
            }
        });

        NameList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameListActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Gender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Genre: ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Actor");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Director");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Gender"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Writer");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Gender"
            }
        ));
        jScrollPane5.setViewportView(jTable3);

        jLabel6.setText("Year: ");

        jLabel7.setText("Country:");

        jLabel9.setText("Language:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(NameList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Movie_Titles))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(39, 39, 39))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(491, 491, 491)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(501, 501, 501)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(496, 496, 496)
                        .addComponent(jLabel5)))
                .addContainerGap(479, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameList, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Movie_Titles))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel12))
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NameListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameListActionPerformed
        // TODO add your handling code here:
        if (NameList.getItemCount() > 0) {
            // Print the contents of the combo box in the terminal
            System.out.println(NameList.getSelectedItem());

                String queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                    "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                    "PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>\n" +
                    "SELECT ?title ?year ?cont ?lan ?director_name\n" +
                    "WHERE {\n" +
                    "  ?movie rdf:type ont:Movie.\n" +
                    "  ?movie ont:title ?title.\n" +
                    "  ?movie ont:year ?year.\n" +
                    "  ?movie ont:country ?cont.\n" +
                    "  ?movie ont:language ?lan.\n" +

//                    "  ?movie ont:HasGenre ?genre.\n" +
//                    "  ?genre ont:genre ?genre_name.\n" +
                    "  FILTER(?title = \""+NameList.getSelectedItem()+"\")\n" +
                    "}";
                com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

                while(results.hasNext()){
                    QuerySolution soln = results.nextSolution();
                    String title = soln.getLiteral("title").getString();                
                    String year = soln.getLiteral("year").getString();              
                    String lang = soln.getLiteral("lan").getString();     
                    String cont = soln.getLiteral("cont").getString();     
//                    String director = soln.getLiteral("director_name").getString();    
                    
                    System.out.println("Title: " + title);                    
                    System.out.println("Year: " + year);                  
                    System.out.println("Language: " + lang);                
                    System.out.println("Country: " + cont);        
                    
                    jLabel8.setText(year);
                    jLabel10.setText(lang);
                    jLabel11.setText(year);
                    jLabel12.setText(cont);
                    
                }
                
                
            queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                    "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                    "PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>\n" +
                    "SELECT ?title ?genre_name\n" +
                    "WHERE {\n" +
                    "  ?movie rdf:type ont:Movie.\n" +
                    "  ?movie ont:title ?title.\n" +
                    "  ?movie ont:HasGenre ?genre.\n" +
                    "  ?genre ont:genre ?genre_name.\n" +
                    "  FILTER(?title = \""+NameList.getSelectedItem()+"\")\n" +
                    "}";

                results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
                String genre = "";
                int counter = 0; 
                while(results.hasNext()){
                    QuerySolution soln = results.nextSolution();
                    String gen = soln.getLiteral("genre_name").getString()+", ";              
                    if (genre.contains(gen) || counter == 2){
                        break;
                    }
                    else{
                    genre += gen;
                    counter++;
                    }
//                    System.out.println("Title: " + director); 

                }
                genre = genre.substring(0, genre.length() - 2) + ".";
                System.out.println("Genre: " + genre); 
                jLabel8.setText(genre);
                
                
               ArrayList<Person> actor = new ArrayList<Person>();
                queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                    "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                    "PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>\n" +
                    "SELECT ?title ?actor_name ?actor_age ?actor_gen \n" +
                    "WHERE {\n" +
                    "  ?movie rdf:type ont:Movie.\n" +
                    "  ?movie ont:title ?title.\n" +
                    "  ?movie ont:HasActor ?actor.\n" +
                    "  ?actor ont:name ?actor_name.\n" +
                    "  ?actor ont:age ?actor_age.\n" +
                    "  ?actor ont:gender ?actor_gen.\n" +
                    "  FILTER(?title = \""+NameList.getSelectedItem()+"\")\n" +
                    
                    "}";
                results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
                
                while(results.hasNext()){
                    QuerySolution soln = results.nextSolution();
                    Person person = new Person();
                    person.name = soln.getLiteral("actor_name").getString();
                    person.age = soln.getLiteral("actor_age").getString();
                    person.gender = soln.getLiteral("actor_gen").getString();              
                    
                    addPerson(actor, person);
//                    System.out.println("Title: " + director); 
                    
                }
                DefaultTableModel model_table = new DefaultTableModel(
                          new Object[][] {

                          },
                          new String [] {
                              "Name", "Age", "Gender"
                              }
                          );
                
                for (Person a : actor) {
                System.out.println("Name: " + a.getName());                
                System.out.println("Age: " + a.getAge());                
                System.out.println("Gender: " + a.getGender());
                
                model_table.addRow(new Object[] {a.getName(), a.getAge(),a.getGender()});
                }
                jTable1.setModel(model_table);
                
                
                
                ArrayList<Person> director = new ArrayList<Person>();
                queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                    "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                    "PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>\n" +
                    "SELECT ?title ?dir_name ?dir_age ?dir_gen \n" +
                    "WHERE {\n" +
                    "  ?movie rdf:type ont:Movie.\n" +
                    "  ?movie ont:title ?title.\n" +
                    "  ?movie ont:HasDirector ?dir.\n" +
                    "  ?dir ont:name ?dir_name.\n" +
                    "  ?dir ont:age ?dir_age.\n" +
                    "  ?dir ont:gender ?dir_gen.\n" +
                    "  FILTER(?title = \""+NameList.getSelectedItem()+"\")\n" +
                    "}";
                
                results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
                
                while(results.hasNext()){
                    QuerySolution soln = results.nextSolution();
                    Person person = new Person();
                    person.name = soln.getLiteral("dir_name").getString();
                    person.age = soln.getLiteral("dir_age").getString();
                    person.gender = soln.getLiteral("dir_gen").getString();
                    addPerson(director, person);
//                    System.out.println("Title: " + director); 
                    
                }
                DefaultTableModel model_table_dir = new DefaultTableModel(
                          new Object[][] {

                          },
                          new String [] {
                              "Name", "Age", "Gender"
                              }
                          );
                
                for (Person a : director) {
                System.out.println("Name: " + a.getName());                
                System.out.println("Age: " + a.getAge());                
                System.out.println("Gender: " + a.getGender());
                
                model_table_dir.addRow(new Object[] {a.getName(), a.getAge(),a.getGender()});
                }
                jTable2.setModel(model_table_dir);
                
                
                ArrayList<Person> writer = new ArrayList<Person>();
                queryString = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n" +
                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                    "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                    "PREFIX ont: <http://www.semanticweb.org/redar/ontologies/2023/4/Movies/>\n" +
                    "SELECT ?title ?wir_name ?wir_age ?wir_gen \n" +
                    "WHERE {\n" +
                    "  ?movie rdf:type ont:Movie.\n" +
                    "  ?movie ont:title ?title.\n" +
                    "  ?movie ont:HasWriter ?wri.\n" +
                    "  ?wir ont:name ?wir_name.\n" +
                    "  ?wir ont:age ?wir_age.\n" +
                    "  ?wir ont:gender ?wir_gen.\n" +
                    "  FILTER(?title = \""+NameList.getSelectedItem()+"\")\n" +
                    "}";
                
                results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
                counter=0;
                while(results.hasNext()){
                    QuerySolution soln = results.nextSolution();
                    Person person = new Person();
                    person.name = soln.getLiteral("wir_name").getString();
                    person.age = soln.getLiteral("wir_age").getString();
                    person.gender = soln.getLiteral("wir_gen").getString();              
//                    if ( counter ==1 )
//                        break;
                    
                    addPerson(writer, person);
//                    System.out.println("Title: " + director); 
                    
                }
                DefaultTableModel model_table_Wri = new DefaultTableModel(
                          new Object[][] {

                          },
                          new String [] {
                              "Name", "Age", "Gender"
                              }
                          );
                
//                for (Person a : writer) {
//                System.out.println("Name: " + a.getName());                
//                System.out.println("Age: " + a.getAge());                
//                System.out.println("Gender: " + a.getGender());
//                System.out.println(counter);
//                counter++;

                model_table_Wri.addRow(new Object[] {writer.get(writer.size()-1).getName(), writer.get(writer.size()-1).getAge(),writer.get(writer.size()-1).getGender()});
//                }
                jTable3.setModel(model_table_Wri);
//            Query query = QueryFactory.create(queryString);
//            QueryExecution qe = QueryExecutionFactory.create(query, model);
//
////              Get the results of the query
//            ResultSet results = qe.execSelect();
//
//            // Print the results of the query
//            while (results.hasNext()) {
//                QuerySolution soln = results.nextSolution();
//                String title = soln.getLiteral("title").getString();
//                String year = soln.getLiteral("year").getString();
//                String genre_name = soln.getLiteral("genre_name").getString();
//                String actor_name = soln.getLiteral("actor_name").getString();
//                String director_name = soln.getLiteral("director_name").getString();
//
//                System.out.println("Title: " + title);
//                System.out.println("Year: " + year);
//                System.out.println("Genre: " + genre_name);
//                System.out.println("Actor: " + actor_name);
//                System.out.println("Director: " + director_name);
//            }
//
//            // Close the query execution
//            qe.close();
//
//

//            DefaultTableModel model_table = new DefaultTableModel(
//                          new Object[][] {
//
//                          },
//                          new String [] {
//                              "Name", "Age", "Gender"
//                              }
//                          );
//            model_table.addRow(new Object[] {NameList.getSelectedItem(), "94", "Male"});
//            jTable1.setModel(model_table);
        }
    }//GEN-LAST:event_NameListActionPerformed

    private void Movie_TitlesActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
      if (once == 0){
          once++;
        try {
              // OntModel model = OpenOWL.OpenConnectOWL();

       System.out.println("Getting List Names");  // get the activity list 
       String queryString;
                      queryString = "PREFIX movies:<http://www.semanticweb.org/redar/ontologies/2023/4/Movies/> "
                             + "SELECT  (str(?x) as ?Movie) "
                              + "where { ?y movies:title ?x."
                             +" }\n ORDER BY DESC(?title)";


      com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
                    
      while (results.hasNext()) {
                   // ByteArrayOutputStream go = new ByteArrayOutputStream(); 
                   //  ResultSetFormatter.out((OutputStream)go ,results,  );
                   // String x =  new String(go.toByteArray(), "UTF-8");
                             QuerySolution soln = results.nextSolution();
                             String TitleofMovie = soln.getLiteral("Movie").getString();
                              //test --
                              System.out.println("Title of movies " + TitleofMovie.toString());
                              ListNames.add(TitleofMovie.toString());

                              RDFNode x = soln.get("Propertyval");

                              String xx = String.valueOf(x);

                              java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                              String xs = xxx.toString();

                       }

                          // Set the table model to the table

                         NameList.removeAllItems(); //  combobox activity
                        for (int i = 0; i < ListNames.size(); i++) {
                         // jTextArea1.setFont(new java.awt.Font("Lucida Console", 0, 10));
                           NameList.addItem(ListNames.get(i));
                       }
                        
                           } catch (Exception ex) {
             ex.printStackTrace();
          }
      }
    }                                        

   

    /**
     * @param args the command line arguments
     */
//    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayFrame().setVisible(true);
                // Check if the combo box has items
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Movie_Titles;
    private javax.swing.JComboBox NameList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
